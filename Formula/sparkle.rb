# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Sparkle < Formula
  desc "âœ¨ Sparkle service."
  homepage "https://sparkle.wiki/"
  version "0.1.0"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/withsparkle/service/releases/download/v0.1.0/sparkle_0.1.0_darwin-arm64.tar.gz"
      sha256 "993275d746472844406bf2b5997d357232ce5c46455bab4124d22e28c95b2523"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/withsparkle/service/releases/download/v0.1.0/sparkle_0.1.0_darwin-amd64.tar.gz"
      sha256 "7595372c11de14d21c19a7534648b9edb09a8fbfdbda8dde4ea6d8471a999e28"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/withsparkle/service/releases/download/v0.1.0/sparkle_0.1.0_linux-arm64.tar.gz"
      sha256 "92d56d47c909fffdc557e56e9717e5085f60e976fea5d9439895e3d2f8dcc771"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/withsparkle/service/releases/download/v0.1.0/sparkle_0.1.0_linux-amd64.tar.gz"
      sha256 "cefad75a051d8ade063f873045f2860ffec50132258f0209807c9f95ad39bf05"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
  end

  test do
    system "#{bin}/sparkle    version"
    system "#{bin}/sparklectl version"
  end
end
