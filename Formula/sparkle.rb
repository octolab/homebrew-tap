# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Sparkle < Formula
  desc "âœ¨ Sparkle service."
  homepage "https://sparkle.wiki/"
  version "0.0.1"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/withsparkle/service/releases/download/v0.0.1/sparkle_0.0.1_darwin-arm64.tar.gz"
      sha256 "508f24353a158db9ab08c4e87f7c0645f9e86f49d5a110a195c16dbc90a7b403"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/withsparkle/service/releases/download/v0.0.1/sparkle_0.0.1_darwin-amd64.tar.gz"
      sha256 "6eb49edac54556d7203ba128fc00be16d7de993dacdae4a538128f9f6581ebfc"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/withsparkle/service/releases/download/v0.0.1/sparkle_0.0.1_linux-arm64.tar.gz"
      sha256 "3fa7e74908074d1dfdcd359d5947c0d16bc48d03ab8a74dabfe1a3178bd84267"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/withsparkle/service/releases/download/v0.0.1/sparkle_0.0.1_linux-amd64.tar.gz"
      sha256 "f248f6c6552e947490a154dc9a9f63e7615dea0dddd05d2b9cf94ba56de5e232"

      def install
        bin.install "sparkle"

        output = Utils.popen_read("#{bin}/sparkle completion bash")
        (bash_completion/"sparkle").write output

        output = Utils.popen_read("#{bin}/sparkle completion fish")
        (fish_completion/"sparkle.fish").write output

        output = Utils.popen_read("#{bin}/sparkle completion zsh")
        (zsh_completion/"_sparkle").write output

        bin.install "sparklectl"

        output = Utils.popen_read("#{bin}/sparklectl completion bash")
        (bash_completion/"sparklectl").write output

        output = Utils.popen_read("#{bin}/sparklectl completion fish")
        (fish_completion/"sparklectl.fish").write output

        output = Utils.popen_read("#{bin}/sparklectl completion zsh")
        (zsh_completion/"_sparklectl").write output

        prefix.install_metafiles
      end
    end
  end

  test do
    system "#{bin}/sparkle    version"
    system "#{bin}/sparklectl version"
  end
end
